#!/usr/bin/env bash
### 
###  rangetable - generate a puzzle range table in ASCII
### 
###        usage: rangetable [OPTION..] BASE "SYMBOLS"
###               rangetable [OPTION..] PUZZLEFILE
###               rangetable [OPTION..] < PUZZLEFILE
### 
###     options - description
### ===========   ====================================================================
###     setSYM= - manipulates SYM in some fashion (see below)
###     nolabel - do not display content label
###     verbose - display runtime variable values
###       debug - enable bash debug mode
###        help - display this usage information and exit
### 
### setSYM=args - description 
### ===========   ====================================================================
###    aboveby# - raises the lower bound of possibilities for SYM by #
###   aboveSYM2 - raises the lower bound of possibilities for SYM above lower of SYM2 
###    belowby# - lowers the upper bound of possibilities for SYM by #
###   belowSYM2 - lowers the upper bound of possibilities for SYM below upper for SYM2
###     default - resets range of possibilities for SYM to default
###   value="#" - sets possibilities of SYM to set value(s) (value appends to setSYM)
### 
### NOTE: redirecting in the PUZZLEFILE causes the original puzzle to also be shown
### 
### NOTE: labels are on by default, and the LABEL environment variable can influence
###       this behaviour (set to "true" or "false")
### 
########################################################################################

########################################################################################
##
## Establish runtime variables
##
NUMBERS="0123456789ABCDEF"
PZLTMP=$(mktemp -p /tmp rangetable.XXXX)
REGEX='\<(debug|nolabel|verbose|help)\>'
SETRE="\<(set.=aboveby[1-9][0-9]*|set.=above[0-9A-F][0-9A-F]*"
SETRE="${SETRE}|set.=belowby[1-9][0-9]*|set.=below."
SETRE="${SETRE}|set.=default|set.value=..*)\>"

########################################################################################
##
## Process arguments
##
DOLABEL=$(echo "${*}"    | egrep -qio '\<nolabel\>' && echo "false" || echo "true")
VERBOSE=$(echo "${*}"    | egrep -qio '\<verbose\>' && echo "true"  || echo "false")
DEBUG=$(echo   "${*}"    | egrep -qio '\<debug\>'   && echo "true"  || echo "false")
DOHELP=$(echo  "${*}"    | egrep -qio '\<help\>'    && echo "true"  || echo "false")
SETARGS=$(echo "${*}"    | tr ' ' '\n' | egrep    "${SETRE}" | tr '\n' ' ') 
ARGS=$(echo    "${*}"    | tr ' ' '\n' | egrep -v "${REGEX}" | egrep -v "${SETRE}" | tr '\n' ' ')
ARGS=$(echo    "${ARGS}" | grep -v '^[ ]*$')
[ "${LABEL}" = "false" ] && DOLABEL="false"

########################################################################################
##
## Be verbose, if enabled
##
if [ "${VERBOSE}" = "true" ]; then
    echo "[verbose] VERBOSE: ${VERBOSE}"
    echo "[verbose] PZLTMP:  ${PZLTMP}"
    echo "[verbose] ARGS:    ${ARGS}"
    echo "[verbose] SETARGS: ${SETARGS}"
    echo "[verbose] DOLABEL: ${DOLABEL}"
    echo "[verbose] DEBUG:   ${DEBUG}"
    echo "[verbose] DOHELP:  ${DOHELP}"
fi

########################################################################################
##
## Phase 2: process 'set' arguments
##
DLST=$(echo    "${SETARGS}" | tr ' ' '\n' | grep '\<set.=default\>' | tr '\n' ' ')
DLST=$(echo    "${DLST}"    | sed 's/set\(.\)=default/\1/g')
REGEX='\<set.value=[0-9A-F][0-9A-F]*\>'
VLST=$(echo    "${SETARGS}" | tr ' ' '\n' | grep "${REGEX}" | tr '\n' ' ')
VLST=$(echo    "${VLST}"    | sed 's/set\(.\)value=\([0-9A-F][0-9A-F]*\)/\1=\2/g')
REGEX='\<set.=aboveby[1-9][0-9]*\>'
ABLST=$(echo   "${SETARGS}" | tr ' ' '\n' | grep "${REGEX}" | tr '\n' ' ')
ABLST=$(echo   "${ABLST}"   | sed 's/set\(.\)=aboveby\([1-9][0-9]*\)/\1+\2/g')
REGEX='\<set.=above[0-9A-Z][0-9A-Z]*\>'
ALST=$(echo    "${SETARGS}" | tr ' ' '\n' | grep "${REGEX}" | tr '\n' ' ')
ALST=$(echo    "${ALST}"    | sed 's/set\(.\)=above\([0-9A-Z][0-9A-Z]*\)/\1>>\2/g')
echo "DLST:  ${DLST}"
echo "VLST:  ${VLST}"
echo "ABLST: ${ABLST}"
echo "ALST:  ${ALST}"
exit

########################################################################################
##
## Transact argument functionality
##
[ "${DEBUG}"  = "true" ] && set -x
[ "${DOHELP}" = "true" ] && cat ${0} | grep '^### ' | sed 's/### //g' && exit 0

########################################################################################
##
## Check for STDIN redirection, otherwise assume file
##
if [   -z "${ARGS}" ]; then
    cat                                                                   >  ${PZLTMP}
    cat ${PZLTMP}
    echo
    PZLFILE="${PZLTMP}"
else
    PZLFILE=$(echo "${ARGS}" | tr -d ' ')
fi

########################################################################################
##
## Reading BASE and SYMBOLS from PUZZLEFILE
##
if [   -e "${PZLFILE}" ]; then
    BASE=$(cat    ${PZLFILE}  | grep '^base: '      | cut -d' ' -f2)
    SYMBOLS=$(cat ${PZLFILE}  | grep '^symbols: '   | cut -d' ' -f2)

    if [ "${VERBOSE}" = "true" ]; then
        echo "[verbose] BASE:    ${BASE}"
        echo "[verbose] SYMBOLS: ${SYMBOLS}"
    fi

########################################################################################
##
## Setting BASE and SYMBOLS from command-line arguments
##
else
    BASE=$(echo    "${ARGS}" | cut -d' ' -f1)
    if [ -z "${BASE}" ]; then
        echo "ERROR: BASE must be specified as first argument!"
        exit 1
    fi

    SYMBOLS=$(echo "${ARGS}" | cut -d' ' -f2 -s)
    if [ -z "${SYMBOLS}" ]; then
        echo "ERROR: SYMBOLS must be specified as second argument!"
        exit 2
    fi
fi

########################################################################################
##
## Obtain RANGE, convert SYMBOLS to iterable form
##
RANGE=$(echo   "${NUMBERS}" | cut -c1-${BASE})
RANGE=$(echo   "${RANGE}"   | sed 's/\(.\)/\1 /g' | sed 's/  */ /g')
SYMBOLS=$(echo "${SYMBOLS}" | sed 's/\(.\)/\1 /g' | sed 's/  */ /g')

if [ "${VERBOSE}" = "true" ]; then
    echo "[verbose] RANGE:   ${RANGE}"
    echo "[verbose] SYMBOLS: ${SYMBOLS}"
fi

########################################################################################
##
## If enabled, display section
##
if [ "${DOLABEL}" = "true" ]; then
    echo "Range Table:"
    echo "==========="
    echo
fi

########################################################################################
##
## Display heading/key
##
echo -n     "      "
for number in ${RANGE}; do
    echo -n "${number} "
done
echo

########################################################################################
##
## Fill out space below heading/key
##
echo -n     "      "
for number in ${RANGE}; do
    echo -n "  "
done
echo

########################################################################################
##
## Insert a gap between the heading/key and the range table
##
echo

########################################################################################
##
## Display each row of SYMBOLS
##
for symbol in ${SYMBOLS}; do
    echo -n "${symbol} = { "
    for number in ${RANGE}; do
        echo -n "${number} "
    done
    echo "}"
done

rm -f ${PZLTMP}

exit 0
