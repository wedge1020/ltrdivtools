#!/usr/bin/env bash
### 
### borrowtakes - a script to convert and display the puzzle in a manner where we
###               can mark the borrows and takes when solving.
### 
###        usage: borrowtakes [OPTION..] PUZZLE
###               borrowtakes [OPTION..] < PUZZLE
###    
###      option - description 
###     =======   ====================================================================
###     nolabel - do not display content label
###       debug - enable bash debugging
###     verbose - display variable information during runtime
###        help - display this usage information and exit
### 
### NOTE: labels are on by default, and the LABEL environment variable can influence
###       this behaviour (set to "true" or "false")
### 
########################################################################################

########################################################################################
##
## Declare variables
##
PZLTMP=$(mktemp -p /tmp borrowtakes.XXXX)
REGEX='\<(nolabel|verbose|debug|help)\>'

########################################################################################
##
## Parameter processing
##
DOLABEL=$(echo "${*}"    | egrep -qio '\<nolabel\>' && echo "false" || echo "true")
DEBUG=$(echo   "${*}"    | egrep -qio '\<debug\>'   && echo "true"  || echo "false")
VERBOSE=$(echo "${*}"    | egrep -qio '\<verbose\>' && echo "true"  || echo "false")
DOHELP=$(echo  "${*}"    | egrep -qio '\<help\>'    && echo "true"  || echo "false")
ARGS=$(echo    "${*}"    | tr ' ' '\n' | egrep -v "${REGEX}" | tr '\n' ' ')
ARGS=$(echo    "${ARGS}" | grep -v '^[ ]*$')
[ "${LABEL}" = "false" ] && DOLABEL="false"

########################################################################################
##
## Be verbose, if enabled
##
if [ "${VERBOSE}" = "true" ]; then
    echo "[verbose] VERBOSE: ${VERBOSE}"
    echo "[verbose] PZLTMP:  ${PZLTMP}"
    echo "[verbose] ARGS:    ${ARGS}"
    echo "[verbose] DOLABEL: ${DOLABEL}"
    echo "[verbose] DEBUG:   ${DEBUG}"
    echo "[verbose] DOHELP:  ${DOHELP}"
fi

########################################################################################
##
## Transact argument functionality
##
[ "${DEBUG}"  = "true" ] && set -x
[ "${DOHELP}" = "true" ] && cat ${0} | grep '^### ' | sed 's/### //g' && exit 0

########################################################################################
##
## Check for STDIN redirection
##
if [ -z "${ARGS}" ]; then
    cat                                                                  >  ${PZLTMP}
    chk=$(tail -1 ${PZLTMP} | grep '^[ ]*$' | wc -l)
    [ "${chk}" -eq 0 ] && echo                                           >> ${PZLTMP}
    PZLFILE="${PZLTMP}"
    cat ${PZLFILE}
else
    PZLFILE=$(echo "${ARGS}" | tr -d ' ')
fi
[ "${VERBOSE}" = "true" ] && echo "[verbose] PZLFILE: ${PZLFILE}"
[ ! -r "${PZLFILE}"     ] && echo "ERROR: could not read ${PZLFILE}" && exit 1

########################################################################################
##
## Determine puzzle widths
##
DSORLEN=$(cat ${PZLFILE} | grep ')' | cut -d' ' -f1 | wc -L)
let DSORLEN=DSORLEN+3
[ "${VERBOSE}" = "true" ] && echo "[verbose] DSORLEN: ${DSORLEN}"

########################################################################################
##
## Reformat the puzzle body based on divisor length (DSORLEN)
##
cat ${PZLFILE} | egrep -v ':|^$|{|}|0 1|^=|\*|<'                         >  ${PZLTMP}H
cat ${PZLTMP}H | cut -c1-${DSORLEN}                                      >  ${PZLTMP}
cat ${PZLTMP}H | cut -c$((${DSORLEN}+1))- | sed "s/\(.\)/ \1/g"          >  ${PZLTMP}2

########################################################################################
##
## Display the results to STDOUT
##
if [ "${DOLABEL}" = "true" ]; then
    echo "Borrows and Takes:"
    echo "================="
    echo
fi
paste -d '' ${PZLTMP} ${PZLTMP}2

########################################################################################
##
## Remove temporary files
##
rm -f ${PZLTMP} ${PZLTMP}2 ${PZLTMP}F ${PZLTMP}H

exit 0
