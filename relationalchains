#!/usr/bin/env bash
### 
### relationalchains - a script to generate initial relational chains content for
###                    a puzzle solving experience.
### 
###        usage: relationalchains [OPTION..] PUZZLE
###               relationalchains [OPTION..] < PUZZLE
###    
###      option - description 
###     =======   ====================================================================
###     nolabel - do not display content label
###       debug - enable bash debugging
###     verbose - display variable information during runtime
###        help - display this usage information and exit
### 
### NOTE: labels are on by default, and the LABEL environment variable can influence
###       this behaviour (set to "true" or "false")
### 
########################################################################################

########################################################################################
##
## Declare variables
##
PZLTMP=$(mktemp -p /tmp relationalchains.XXXX)
REGEX='\<(nolabel|verbose|debug|help)\>'

########################################################################################
##
## Parameter processing
##
DOLABEL=$(echo "${*}"    | egrep -qio '\<nolabel\>' && echo "false" || echo "true")
DEBUG=$(echo   "${*}"    | egrep -qio '\<debug\>'   && echo "true"  || echo "false")
VERBOSE=$(echo "${*}"    | egrep -qio '\<verbose\>' && echo "true"  || echo "false")
DOHELP=$(echo  "${*}"    | egrep -qio '\<help\>'    && echo "true"  || echo "false")
ARGS=$(echo    "${*}"    | tr ' ' '\n' | egrep -v "${REGEX}" | tr '\n' ' ')
ARGS=$(echo    "${ARGS}" | grep -v '^[ ]*$')
[ "${LABEL}" = "false" ] && DOLABEL="false"

########################################################################################
##
## Be verbose, if enabled
##
if [ "${VERBOSE}" = "true" ]; then
    echo "[verbose] VERBOSE: ${VERBOSE}"
    echo "[verbose] PZLTMP:  ${PZLTMP}"
    echo "[verbose] ARGS:    ${ARGS}"
    echo "[verbose] DOLABEL: ${DOLABEL}"
    echo "[verbose] DEBUG:   ${DEBUG}"
    echo "[verbose] DOHELP:  ${DOHELP}"
fi

########################################################################################
##
## Transact argument functionality
##
[ "${DEBUG}"  = "true" ] && set -x
[ "${DOHELP}" = "true" ] && cat ${0} | grep '^### ' | sed 's/### //g' && exit 0

########################################################################################
##
## Check for STDIN redirection
##
if [ -z "${ARGS}" ]; then
    cat                                                                  >  ${PZLTMP}
    chk=$(tail -1 ${PZLTMP} | grep '^[ ]*$' | wc -l)
    [ "${chk}" -eq 0 ] && echo                                           >> ${PZLTMP}
    PZLFILE="${PZLTMP}"
    cat ${PZLFILE}
else
    PZLFILE=$(echo "${ARGS}" | tr -d ' ')
fi
[ "${VERBOSE}" = "true" ] && echo "[verbose] PZLFILE: ${PZLFILE}"
[ ! -r "${PZLFILE}"     ] && echo "ERROR: could not read ${PZLFILE}" && exit 1

########################################################################################
##
## If enabled, display section
##
if [ "${DOLABEL}" = "true" ]; then
    echo "Relational Chains:"
    echo "================="
    echo
fi

########################################################################################
##
## Display the results to STDOUT
##
hchk=$(cat ${PZLFILE} | grep '^hints:' | wc -l)
if [ "${hchk}" -gt 0 ]; then
    hints=$(grep '^hints:' ${PZLFILE} | cut -d':' -f2 | tr -d ' ' | tr ',' ' ')
    SEDEXP='\([A-Za-z0-9]\)\(<<\?\)\([A-Za-z0-9]\)'
    for hint in ${hints}; do
        echo "  * ${hint}" | sed "s/^  \* ${SEDEXP}$/  * \1 \2 \3/g"
    done
else
    echo "  * "
fi
echo
echo "NOTE: '<'  denotes EXACTLY ONE less than"
echo "      '<<' denotes SOMEWHAT less than"
echo

########################################################################################
##
## Remove temporary files
##
rm -f ${PZLTMP}

exit 0
